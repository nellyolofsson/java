<?xml version="1.0" encoding="utf-8"?>
<testsuite package="org.spotbugs" time="0" tests="15" errors="6" name="findbugs">
<testcase time="0" name="model/MemberValidationService.java" classname="FindBugs Issues">
<failure message="issues" ><![CDATA[lines: 6-53 
Unread field: phoneNumberLength 
Unread field 
This field is never read. Consider removing it from the class.
----------------
]]></failure>
</testcase><testcase time="0" name="model/Contract.java" classname="FindBugs Issues">
<failure message="issues" ><![CDATA[lines: 20-58 
getBorrower() may expose internal representation by returning 
  Contract.borrower 
May expose internal representation by returning reference to mutable object 
Returning a reference to a mutable object value stored in one of the 
  object's fields exposes the internal representation of the object. If 
  instances are accessed by untrusted code, and unchecked changes to the 
  mutable object would compromise security or other important properties, 
  you will need to do something different. Returning a new copy of the 
  object is better approach in many situations.
----------------
lines: 20-58 
getLender() may expose internal representation by returning Contract.lender 
May expose internal representation by returning reference to mutable object 
Returning a reference to a mutable object value stored in one of the 
  object's fields exposes the internal representation of the object. If 
  instances are accessed by untrusted code, and unchecked changes to the 
  mutable object would compromise security or other important properties, 
  you will need to do something different. Returning a new copy of the 
  object is better approach in many situations.
----------------
lines: 20-58 
new model.Contract(int, int, Item, Member, Member) may expose internal 
  representation by storing an externally mutable object into 
  Contract.borrower 
May expose internal representation by incorporating reference to mutable 
  object 
This code stores a reference to an externally mutable object into the 
  internal representation of the object. If instances are accessed by 
  untrusted code, and unchecked changes to the mutable object would 
  compromise security or other important properties, you will need to do 
  something different. Storing a copy of the object is better approach in 
  many situations.
----------------
lines: 20-58 
new model.Contract(int, int, Item, Member, Member) may expose internal 
  representation by storing an externally mutable object into 
  Contract.lender 
May expose internal representation by incorporating reference to mutable 
  object 
This code stores a reference to an externally mutable object into the 
  internal representation of the object. If instances are accessed by 
  untrusted code, and unchecked changes to the mutable object would 
  compromise security or other important properties, you will need to do 
  something different. Storing a copy of the object is better approach in 
  many situations.
----------------
]]></failure>
</testcase><testcase time="0" name="controller/Controller.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="view/PrinterView.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="model/Member.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="model/StuffLendingSystem.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="controller/App.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="view/View.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="controller/TimeController.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="view/ControllerCallback.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="model/Item.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="view/ConsoleView.java" classname="FindBugs Issues">
<failure message="issues" ><![CDATA[lines: 16-491 
Comparison of String objects using == or != in getIdItem(Iterable) 
Comparison of String objects using == or != 
This code compares java.lang.String objects for reference equality using 
  the == or != operators. Unless both strings are either constants in a 
  source file, or have been interned using the String.intern() method, the 
  same string value may be represented by two different String objects. 
  Consider using the equals(Object) method instead.
----------------
]]></failure>
</testcase><testcase time="0" name="view/MenuActions.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="model/Category.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="controller/DataLoader.java" classname="FindBugs Issues">
</testcase></testsuite>